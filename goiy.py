from flask import Flask, request, jsonify
import pandas as pd
import pymysql
import requests
from flask_cors import CORS
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler

app = Flask(__name__)
CORS(app, supports_credentials= True)  # Cho ph√©p t·∫•t c·∫£ c√°c ngu·ªìn truy c·∫≠p API

# Th√¥ng tin k·∫øt n·ªëi MySQL
DB_CONFIG = {
    'host': '127.0.0.1',
    'user': 'Mungweb',
    'password': 'Mung0403@',
    'database': 'datn2025',
    'port': 3306,
    'cursorclass': pymysql.cursors.DictCursor
}

# Danh s√°ch c·ªôt d·∫°ng BIT c·∫ßn chuy·ªÉn ƒë·ªïi th√†nh s·ªë nguy√™n
BIT_COLUMNS = ['hotcold', 'airconditioner', 'closed', 'commonowner', 'pets', 'wifi']
FLOAT_COLUMNS = ['Acreage', 'Distance', 'price']
SPRING_BOOT_URL = "http://localhost:8081/receive_rooms"  # API c·ªßa Spring Boot

def connect_to_database():
    """ K·∫øt n·ªëi ƒë·∫øn MySQL v√† tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng connection. """
    try:
        connection = pymysql.connect(**DB_CONFIG)
        return connection
    except Exception as e:
        print(f"L·ªói k·∫øt n·ªëi CSDL: {e}")
        return None

def fetch_data(query):
    """ L·∫•y d·ªØ li·ªáu t·ª´ MySQL theo truy v·∫•n SQL. """
    connection = connect_to_database()
    if not connection:
        return pd.DataFrame()

    try:
        query = "SELECT roomid, Acreage, Distance, price, commonowner, closed, airconditioner, hotcold, pets, wifi, area, type FROM room"
        with connection.cursor() as cursor:
            cursor.execute(query)
            result = cursor.fetchall()
        return pd.DataFrame(result)
    finally:
        connection.close()

def preprocess_data(df):
    """ Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu, chuy·ªÉn ƒë·ªïi ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p. """
    if df.empty:
        return df

    columns = ['roomid', 'Acreage', 'Distance', 'price', 'commonowner', 'closed', 'airconditioner',
               'hotcold', 'pets', 'wifi', 'area', 'type']
    data = df[columns]

    # Chuy·ªÉn BIT(1) v·ªÅ s·ªë nguy√™n
    for col in BIT_COLUMNS:
        data.loc[:, col] = data[col].apply(lambda x: int.from_bytes(x, "big") if isinstance(x, bytes) else int(x))

    # Chuy·ªÉn price th√†nh float
    for column in FLOAT_COLUMNS:
        data.loc[:, column] = data[column].astype(float)

    return data

def find_nearest_rooms(data, user_input, n_neighbors=3):
    """ T√¨m c√°c ph√≤ng tr·ªç g·∫ßn nh·∫•t d·ª±a tr√™n d·ªØ li·ªáu ƒë·∫ßu v√†o c·ªßa ng∆∞·ªùi d√πng. """
    if not isinstance(data, pd.DataFrame):
        return pd.DataFrame(), None, []

    message = None
    # L·ªçc theo khu v·ª±c n·∫øu c√≥
    if user_input.get('area'):
        area_user = user_input['area'].strip().lower()
        data_filtered = data[data['area'].str.strip().str.lower() == area_user]
        if data_filtered.empty:
            message = {
                "message": f"‚ùå Kh√¥ng c√≥ ph√≤ng tr·ªç n√†o trong khu v·ª±c '{user_input['area']}'.",
                "suggestion": "‚û°Ô∏è B·∫°n c√≥ th·ªÉ tham kh·∫£o c√°c ph√≤ng tr·ªç kh√°c.",
            }
            data_filtered = data.copy()
    else:
        data_filtered = data.copy()

    # L·ªçc theo lo·∫°i ph√≤ng n·∫øu c√≥
    if user_input.get('type'):
        type_user = user_input['type'].strip().lower()
        data_filtered = data_filtered[data_filtered['type'].str.strip().str.lower() == type_user]

    if data_filtered.empty:
        return pd.DataFrame(), None, []

    # L∆∞u l·∫°i index
    index_data_filtered = data_filtered.index.tolist()

    # L∆∞u l·∫°i RoomID ƒë·ªÉ d√πng sau khi t√¨m KNN
    room_ids = data_filtered['roomid'].tolist()

    # X√≥a c·ªôt kh√¥ng c·∫ßn thi·∫øt
    data_filtered = data_filtered.drop(columns=['roomid','area', 'type'], errors='ignore')

    # Chuy·ªÉn d·ªØ li·ªáu ƒë·∫ßu v√†o th√†nh DataFrame
    user_input_df = pd.DataFrame([user_input])

    # X√≥a c·ªôt kh√¥ng c·∫ßn thi·∫øt
    user_input_df = user_input_df.drop(columns=['type', 'area'], errors='ignore')

    # ƒêi·ªÅn gi√° tr·ªã NaN
    user_input_df = user_input_df.fillna(0)

    # ƒê·∫£m b·∫£o user_input_df c√≥ c√πng s·ªë c·ªôt v·ªõi data_filtered
    for col in data_filtered.columns:
        if col not in user_input_df.columns:
            user_input_df[col] = 0

    user_input_df = user_input_df[data_filtered.columns]

    if data_filtered.empty:
        return pd.DataFrame(), None, []

    n_neighbors = min(n_neighbors, len(data_filtered))
    if n_neighbors < 1:
        return pd.DataFrame(), None, []

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = StandardScaler()
    scaled_features = scaler.fit_transform(data_filtered)
    user_scaled = scaler.transform(user_input_df)

    # X√¢y d·ª±ng m√¥ h√¨nh KNN
    knn = NearestNeighbors(n_neighbors=n_neighbors, metric='euclidean')
    knn.fit(scaled_features)

    # T√¨m c√°c ph√≤ng tr·ªç g·∫ßn nh·∫•t
    distances, indices = knn.kneighbors(user_scaled)

    # Chuy·ªÉn k·∫øt qu·∫£ v·ªÅ DataFrame
    results = pd.DataFrame({
        'index': [index_data_filtered[i] for i in indices[0]],
        'roomid': [room_ids[i] for i in indices[0]],
        'distance': distances[0]
    })

    results = results.sort_values(by='distance', ascending=True)

    # L·∫•y danh s√°ch room_id ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp ƒë√∫ng th·ª© t·ª±
    nearest_room_ids = results['roomid'].tolist()

    return data.loc[results['index']].reset_index(drop=True), message, nearest_room_ids


def normalize_value(value):
    if value is True:
        return 1
    elif value is False:
        return 0
    elif value == "allowed":
        return 1
    elif value == "not_allowed":
        return 0
    return value  # Gi·ªØ nguy√™n n·∫øu kh√¥ng ph·∫£i c√°c gi√° tr·ªã tr√™n




def send_data_to_spring_boot(data):
    try:
        print(f"Sending request to {SPRING_BOOT_URL} with method POST")
        response = requests.post(SPRING_BOOT_URL, json=data)
        print(f"Response status: {response.status_code}")
        print(f"Response body: {response.text}")  # Xem Spring Boot tr·∫£ v·ªÅ g√¨
        return response.json()  # L·ªói x·∫£y ra ·ªü ƒë√¢y n·∫øu JSON r·ªóng
    except requests.exceptions.RequestException as e:
        print(f"L·ªói g·ª≠i d·ªØ li·ªáu ƒë·∫øn Spring Boot: {e}")
        return None
    except ValueError as e:
        print(f"L·ªói parse JSON t·ª´ ph·∫£n h·ªìi Spring Boot: {e}")  # B·∫Øt l·ªói JSON r·ªóng
        return None



@app.route("/", methods=["GET"])
def home():
    return "Welcome to the Room Finder API! Use /find_rooms to find rooms."

@app.route('/find_rooms', methods=['POST'])
def find_rooms():
    """ API nh·∫≠n d·ªØ li·ªáu t·ª´ request v√† tr·∫£ v·ªÅ danh s√°ch ph√≤ng tr·ªç g·ª£i √Ω. """
    data = fetch_data("SELECT * FROM room")
    data = preprocess_data(data)
    print(data)
    print(data.dtypes)


    # request_data = request.get_json()
    # if not request_data:
    #     return jsonify({"error": "Invalid input"}), 400
    # print("request_data", request_data)

    # Nh·∫≠n d·ªØ li·ªáu t·ª´ request
    user_input = request.get_json()
    if not user_input:
        return jsonify({"error": "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá"}), 400
    # Chu·∫©n h√≥a dictionary
    user_input = {k: normalize_value(v) for k, v in user_input.items()}
    # Chuy·ªÉn ƒë·ªïi c√°c gi√° tr·ªã c·∫ßn sang float, n·∫øu kh√¥ng chuy·ªÉn ƒë∆∞·ª£c th√¨ g√°n 0.0
    for key in ['Acreage', 'Distance', 'price']:
        try:
            user_input[key] = float(user_input[key])
        except (ValueError, TypeError):
            user_input[key] = 0.0  # G√°n 0.0 n·∫øu gi√° tr·ªã kh√¥ng h·ª£p l·ªá


    print("D·ªØ li·ªáu ng∆∞·ªùi d√πng:", user_input)
    for key, value in user_input.items():
        print(f"üîπ {key}: {value} (Ki·ªÉu: {type(value).__name__})")

    result, message, nearest_room_ids = find_nearest_rooms(data, user_input, n_neighbors=6)
    print(message)
    print(nearest_room_ids)

    # S·∫Øp x·∫øp th·ª© t·ª±: message tr∆∞·ªõc, data sau
    response = {"List_room_id": nearest_room_ids}
    if message:
        response.update(message)  # ƒê∆∞a message l√™n ƒë·∫ßu

    response["data"] = result.to_dict(orient="records")  # D·ªØ li·ªáu ph√≤ng tr·ªç


    # G·ª≠i d·ªØ li·ªáu ƒë·∫øn Spring Boot
    spring_response = send_data_to_spring_boot(response)
    return jsonify({"spring_response": spring_response, "flask_data": response}), 200


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
